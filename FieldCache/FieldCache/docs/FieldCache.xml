<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FieldCache</name>
    </assembly>
    <members>
        <member name="T:FieldCacheNamespace.FieldCache`2">
            <summary>
            Provides lazy initialization experience. Is better than the Lazy class as:
            1) Is a struct
            2) Does not affect record's Equals in a bad way Lazy does
            <code>
            public int MyProperty => myProperty.GetValue(static @this => @this.SomeComplexMethod(), @this);
            public FieldCache int myProperty;
            </code>
            </summary>
            <typeparam name="TThis">
            The type of the holder. The holder
            is the type inside which you are creating a lazy property. Must be a reference type.
            </typeparam>
            <typeparam name="T">
            The type to store inside
            </typeparam>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`2.#ctor(System.Func{`0,`1})">
            <summary>
            Loads the static factory into the field cache on creation.
            It is the preferred way and might give a performance boost
            from 2ns to 0.5ns (so that GetValue will be as fast as Lazy.Value).
            </summary>
            <param name="factory">
            The only argument of the factory is the object passed into GetValue method.
            Unlike Lazy, where you are supposed to catch variables from outside, here
            you need to pass your reference object (usually, you want to pass the holder,
            that is, "this) and then, in the lambda itself, you can address its fields
            without limitations.
            </param>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`2.Equals(FieldCacheNamespace.FieldCache{`0,`1})">
            <summary>
            So that when records get compared, this field will not affect the result
            </summary>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`2.Equals(System.Object)">
            <summary>
            So that when records get compared, this field will not affect the result
            </summary>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`2.GetHashCode">
            <summary>
            So that when records get compared, this field will not affect the result
            </summary>
        </member>
        <member name="M:FieldCacheNamespace.FieldCache`2.GetValue(`0)">
            <summary>
            Return the value, returned by the factory you passed into the constructor. The factory
            will never run more than once. The method is thread-safe.
            </summary>
            <param name="this">
            To avoid reallocation, your method must be static (that is, not reading any outside variables from the instance),
            and instead of addressing your fields by normal this, pass this argument and address via this one
            (see examples on the readme)
            </param>
            <returns>The value returned by factory</returns>
        </member>
    </members>
</doc>
