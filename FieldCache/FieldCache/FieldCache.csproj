<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>9.0</LangVersion>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>1.0.1</Version>
    <Authors>WhiteBlackGoose</Authors>
    <Company>Angouri</Company>
    <Description>FieldCache is a good replacement for Lazy&lt;T&gt; for records, when you don't want to override default ctor/equals/etc, but you want a property to be lazily initialized. See the repo https://github.com/WhiteBlackGoose/FieldCache</Description>
    <Copyright>WhiteBlackGoose 2020-2021</Copyright>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <RepositoryUrl>https://github.com/WhiteBlackGoose/FieldCache</RepositoryUrl>
    <PackageTags>record, safety</PackageTags>
    <PackageReleaseNotes>Boosted. Now it's as fast as Lazy's Value, but the API had to be changed.</PackageReleaseNotes>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
    <RepositoryType>public</RepositoryType>
    <PackageIcon>ico1.png</PackageIcon>
    <PackageProjectUrl>https://github.com/WhiteBlackGoose/FieldCache</PackageProjectUrl>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <DocumentationFile>./docs/FieldCache.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="FieldCache.xml" />
    <None Include="..\..\ico1.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

</Project>
