<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>9.0</LangVersion>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>1.0.0</Version>
    <Authors>WhiteBlackGoose</Authors>
    <Company>Angouri</Company>
    <Description>FieldCache is a good replacement for Lazy&lt;T&gt; for cases when: 

First, needed safe record comparison (Equals overriden to true).

Second, when it is more convenient to pass lambda inside the method (e. g. when local fields to be taken into account).

This is a good use example:

public record Person(string FirstName, string LastName)
{
	public string FullName =&gt; fullName.GetValue(@this =&gt; @this.FirstName + " " + @this.LastName, this);
	private FieldCache&lt;string&gt; fullName;
}</Description>
    <Copyright>Angouri 2020</Copyright>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <RepositoryUrl>https://github.com/WhiteBlackGoose/FieldCache</RepositoryUrl>
    <PackageTags>record, safety</PackageTags>
    <PackageReleaseNotes>Boosted (about 1.5ns faster (3.8 to 2.3) in case you create the lambda every time. If you store it in a private field, the time needed to access it is approximately 0.4-0.8ns).</PackageReleaseNotes>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <DocumentationFile>./docs/FieldCache.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="FieldCache.xml" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

</Project>
